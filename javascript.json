{
	// Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	"Fetch API Js": {
		"prefix": "fetch",
		"body": [
			"fetch('${url}');"			
		],
		"description": "Fetch API JavaScript"
	},
	"Map Loop": {
		"prefix": "map",
		"body": [
			"${1:array}.map(${2:element} => {",
			"    return $0;",
			"});"
		],
		"description": "Array manipulation with map()"
	},
	"Filter Loop": {
		"prefix": "filter",
		"body": [
			"${1:array}.filter(${2:element} => {",
			"    return $0;",
			"});"
		],
		"description": "Array manipulation with filter()"
	},
	"Reduce Loop": {
		"prefix": "reduce",
		"body": [
			"${1:array}.reduce((${2:acc}, ${3:element}) => {",
			"    return $0;",
			"}, $4);"
		],
		"description": "Array manipulation with reduce()"
	},
	"Arrow Function": {
		"prefix": "arrowFn",
		"body": [
			"const ${1:name} = (${2}) => {",
			"    $0",
			"}"
		],
		"description": "Arrow function"
	},
	"Time Default Format": {
		"prefix": "time",
		"body": [
			"function timeDefaultFormat(time) {",
			"    let split = time.split(':');",
			"    timeFormat = split[0] + ':' + split[1];",
			"    return timeFormat;",			
			"}"			
		],
		"description": "Hora em formato padrão"
	},
	"Date Default Format": {
		"prefix": "date",
		"body": [
			"function dateDefaultFormat(date) {",
			"    let split = date.split(':');",
			"    dateFormat = split[0] + ':' + split[1];",
			"    return dateFormat;",			
			"}"			
		],
		"description": "Data em formato padrão"
	},
}